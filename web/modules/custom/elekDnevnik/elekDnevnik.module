<?php

/**
 * Implements hook_menu_links_discovered_alter().
 * Modify the menu links based on user login status.
 */
function elekDnevnik_menu_links_discovered_alter(array &$links) {
  $current_user = \Drupal::currentUser();

  if ($current_user->isAuthenticated()) {
    // User is logged in, add a Logout link.
    $links['elekDnevnik.logout_link'] = [
      'title' => t('Logout'),
      'route_name' => 'user.logout',
      'menu_name' => 'main-menu',
      'weight' => 0,
    ];
    if (isset($links['elekDnevnik.custom_login_link'])) {
      unset($links['elekDnevnik.custom_login_link']);
    }
  }
  else {
    // User is not logged in, show the Login link.
    $links['elekDnevnik.custom_login_link'] = [
      'title' => t('Login'),
      'route_name' => 'elekDnevnik.login_form',
      'menu_name' => 'main-menu',
      'weight' => 0,
    ];
    if (isset($links['elekDnevnik.logout_link'])) {
      unset($links['elekDnevnik.logout_link']);
    }
  }
}


use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_menu() to define the route for the register page.
 */
function elekDnevnik_menu() {
    $items['admin/register'] = [
        'title' => 'User Registration',
        'page callback' => 'elekDnevnik_user_register',
        'access callback' => 'user_access',
        'access arguments' => ['administer users'],
        'type' => MENU_NORMAL_ITEM,
    ];
    return $items;
}

/**
 * Page callback for the registration form.
 */
function elekDnevnik_user_register() {
    return \Drupal::formBuilder()->getForm('elekDnevnik_user_register_form');
}


function elekDnevnik_load_professors_subjects() {
  $query = \Drupal::database()->select('user_registration', 'u')
    ->fields('u', ['id', 'first_name', 'last_name', 'role'])
    ->condition('u.role', 'profesor%', 'LIKE');  // Assuming role column holds roles like 'profesor,subject'
  $result = $query->execute();

  $options = [];
  foreach ($result as $record) {
    list($role, $subject) = explode(',', $record->role, 2);
    
    if ($role === 'profesor' && isset($subject)) {
      $teacher_name = $record->first_name . ' ' . $record->last_name;
      $options[$record->id] = $teacher_name . ' (' . $subject . ')';
    }
  }
  
  return $options;
}


use Drupal\Core\Access\AccessResult;
use Drupal\Core\Session\AccountInterface;

/**
 * Custom access callback to restrict access to the login page.
 */
function elekDnevnik_login_access(AccountInterface $account) {
  return $account->isAnonymous() ? AccessResult::allowed() : AccessResult::forbidden();
}


/**
 * Custom access callback to restrict access to the class entry page.
 */
function elekDnevnik_class_entry_access(AccountInterface $account) {
  if (in_array('profesor', $account->getRoles())) {
    return AccessResult::allowed();
  }
  else if (in_array('administrator', $account->getRoles())) {
    return AccessResult::allowed();
  }
  return AccessResult::forbidden();
}

/**
 * Custom access callback to restrict access to the grade entry page.
 */
function elekDnevnik_grade_entry_access(AccountInterface $account) {
  if (in_array('profesor', $account->getRoles())) {
    return AccessResult::allowed();
  }
  elseif (in_array('administrator', $account->getRoles())) {
    return AccessResult::allowed();
  }
  return AccessResult::forbidden();
}

/**
 * Custom access callback to restrict access to the student grades page.
 */
function elekDnevnik_student_grades_access(AccountInterface $account) {
  if (in_array('ucenik', $account->getRoles())) {
    return AccessResult::allowed();
  }
  elseif (in_array('administrator', $account->getRoles())) {
    return AccessResult::allowed();
  }
  return AccessResult::forbidden();
}

/**
 * Custom access callback to restrict access to the note entry page.
 */
function elekDnevnik_note_entry_access(AccountInterface $account) {
  if (in_array('profesor', $account->getRoles())) {
    return AccessResult::allowed();
  }
  elseif (in_array('administrator', $account->getRoles())) {
    return AccessResult::allowed();
  }
  return AccessResult::forbidden();
}